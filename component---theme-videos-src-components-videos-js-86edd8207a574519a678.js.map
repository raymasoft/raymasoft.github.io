{"version":3,"sources":["webpack:///../theme-videos/src/Components/Layout.js","webpack:///../theme-videos/src/Components/Videos.js"],"names":["Layout","query","Videos","data","pageContext","markdownNodes","allMarkdownRemark","nodes","sort","a","b","Date","parent","birthTime","frontmatter","order","faqs","title","imageUrl","allFile","length","publicURL","alt","fluid","childImageSharp","className","map","node","key","fileName","src","videoUrl","controls","preload","dangerouslySetInnerHTML","__html","html"],"mappings":"kKAGeA,E,UAAf,E,iCCmDaC,GAFEC,UA9CA,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAChBC,EAAgBF,EAAKG,kBAAkBC,MAC1CC,MAAK,SAACC,EAAGC,GAAJ,OAAU,IAAIC,KAAKF,EAAEG,OAAOC,WAAa,IAAIF,KAAKD,EAAEE,OAAOC,cAChEL,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEI,YAAYC,MAAQN,EAAEK,YAAYC,SAEtD,OACE,kBAACf,EAAD,CAAQgB,KAAMZ,EAAYY,MACxB,kBAAC,IAAD,CACEC,MAAOb,EAAYa,MACnBC,SAAwC,IAA9Bf,EAAKgB,QAAQZ,MAAMa,QAAgBjB,EAAKgB,QAAQZ,MAAM,GAAGc,UACnEL,KAAMZ,EAAYY,OAEW,IAA9Bb,EAAKgB,QAAQZ,MAAMa,QAClB,kBAAC,IAAD,CAAKE,IAAI,SAASC,MAAOpB,EAAKgB,QAAQZ,MAAM,GAAGiB,gBAAgBD,QAEjE,yBAAKE,UAAU,mHACZpB,EACCA,EAAcqB,KAAI,SAACC,GAAD,OAChB,yBAAKC,IAAKD,EAAKb,YAAYe,SAAUJ,UAAU,6BAC7C,yBAAKA,UAAU,WACb,yBAAKA,UAAU,YACb,2BACEA,UAAU,sBACVK,IAAK1B,EAAY2B,SAAWJ,EAAKb,YAAYe,SAC7CG,UAAQ,EACRC,QAAQ,UAGZ,yBAAKR,UAAU,8BAA8BE,EAAKb,YAAYG,OAC9D,yBACEQ,UAAU,qBACVS,wBAAyB,CAAEC,OAAQR,EAAKS,aAMhD,yBAAKX,UAAU,mDAAf,iCAWQ","file":"component---theme-videos-src-components-videos-js-86edd8207a574519a678.js","sourcesContent":["import React from \"react\";\nimport { Layout } from \"theme-layout\";\n\nexport default Layout;\n","import React from \"react\";\nimport Layout from \"./Layout\";\nimport { graphql } from \"gatsby\";\nimport { SEO } from \"theme-seo\";\nimport Img from \"gatsby-image\";\n\nconst Videos = ({ data, pageContext }) => {\n  const markdownNodes = data.allMarkdownRemark.nodes\n    .sort((a, b) => new Date(a.parent.birthTime) - new Date(b.parent.birthTime))\n    .sort((a, b) => b.frontmatter.order - a.frontmatter.order);\n\n  return (\n    <Layout faqs={pageContext.faqs}>\n      <SEO\n        title={pageContext.title}\n        imageUrl={data.allFile.nodes.length !== 0 && data.allFile.nodes[0].publicURL}\n        faqs={pageContext.faqs}\n      />\n      {data.allFile.nodes.length !== 0 && (\n        <Img alt=\"Videos\" fluid={data.allFile.nodes[0].childImageSharp.fluid} />\n      )}\n      <div className=\"flex flex-wrap my-24 justify-center md:flex-col lg:flex-row lg:justify-start w-10/12 lg:w-5/6 mx-auto shadow-xl\">\n        {markdownNodes ? (\n          markdownNodes.map((node) => (\n            <div key={node.frontmatter.fileName} className=\"md:w-11/12 lg:w-1/3 my-3 \">\n              <div className=\"p-2 m-4\">\n                <div className=\"mx-2 p-2\">\n                  <video\n                    className=\"w-full h-64 mx-auto\"\n                    src={pageContext.videoUrl + node.frontmatter.fileName}\n                    controls\n                    preload=\"none\"\n                  />\n                </div>\n                <div className=\"text-gray-700 text-2xl m-4\">{node.frontmatter.title}</div>\n                <div\n                  className=\"text-gray-600 mx-4\"\n                  dangerouslySetInnerHTML={{ __html: node.html }}\n                ></div>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"m-auto text-purple-600 my-10 font-bold text-4xl\">\n            There is no videos to show\n          </div>\n        )}\n      </div>\n    </Layout>\n  );\n};\n\nexport default Videos;\n\nexport const query = graphql`\n  query allVideos {\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/video/\" } }) {\n      nodes {\n        html\n        fields {\n          slug\n        }\n        frontmatter {\n          fileName\n          description\n          title\n          order\n        }\n        parent {\n          ... on File {\n            birthTime(formatString: \"MM/DD/YYYY\")\n          }\n        }\n      }\n    }\n    allFile(\n      filter: {\n        sourceInstanceName: { eq: \"video\" }\n        extension: { eq: \"jpg\" }\n        name: { eq: \"video\" }\n      }\n    ) {\n      nodes {\n        name\n        publicURL\n        childImageSharp {\n          fluid(maxWidth: 2500) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}